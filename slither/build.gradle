apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.swiggy'

android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    defaultPublishConfig "androidxRelease"
    flavorDimensions "androidLibraryVersion"
    productFlavors {
        androidx {
            dimension "androidLibraryVersion"
        }
        android28 {
            dimension "androidLibraryVersion"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.facebook.shimmer:shimmer:0.4.0@aar'


    androidxImplementation 'com.facebook.litho:litho-widget:0.25.0'
    androidxImplementation 'com.facebook.litho:litho-core:0.25.0'
    androidxCompileOnly 'com.facebook.litho:litho-annotations:0.25.0'
    kaptAndroidx 'com.facebook.litho:litho-processor:0.25.0'

    android28Implementation 'com.facebook.litho:litho-widget:0.21.0'
    android28Implementation 'com.facebook.litho:litho-core:0.21.0'
    android28CompileOnly 'com.facebook.litho:litho-annotations:0.21.0'
    kaptAndroid28 'com.facebook.litho:litho-processor:0.21.0'
}
repositories {
    mavenCentral()
}

if (android.productFlavors.size() > 0) {
    android.libraryVariants.all { variant ->
        if (variant.name.toLowerCase().contains("debug")) {
            return
        }

        def bundleTask = tasks["bundle${variant.name.capitalize()}Aar"]

        artifacts {
            archives(bundleTask.archivePath) {
                classifier variant.flavorName
                builtBy bundleTask
                name = project.name
            }
        }
    }
}